package org.example;

import org.example.model.Duration;
import org.example.model.Project;

import java.text.DecimalFormat;
import java.util.*;
import java.util.stream.Collectors;

public class QuestionTwo {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number of project: ");
        int n = scanner.nextInt();
        String[] projectNames = new String[n];
        double[] projectCost = new double[n];
        double[] rate = new double[n];
        //reading data from scanner
        List<Project> projectList = readDataFromScanner(scanner, projectNames, projectCost, rate);
        List<Project> projectToCompare = new ArrayList<>();

        if (!projectList.isEmpty()) {
            projectList.forEach(project -> {
                System.out.println("\t\t\t\t\t\t\t" + project.getProjectName());
                System.out.println("---------------------------------------------------------------");
                System.out.println("Year |\t\t Cash\t\t|\t PV Factor  | \tAmount ");
                System.out.println("\t | Inflows/Outflows |");
                System.out.println("---------------------------------------------------------------");
                List<Duration> durationList = project.getDuration();

                List<Double> incomes = new ArrayList<>();
                List<Double> amounts = new ArrayList<>();
                DecimalFormat decimalFormat = new DecimalFormat("0,000.00");
                if (!durationList.isEmpty()) {
                    durationList.forEach(duration -> {
                        incomes.add(duration.getCash());
                        int durationYear = duration.getYear();
                        double pvFactor = calculatePVFactor(project.getRate(), durationYear);
                        double amount = calculateAmount(duration.getCash(), pvFactor);
                        amounts.add(amount);
                        DecimalFormat pvFactorFormat = new DecimalFormat("0.0000");
                        System.out.println(duration.getYear()
                                + "\t |\t$" + decimalFormat.format(duration.getCash())
                                + "\t\t|\t " + pvFactorFormat.format(pvFactor)
                                + "\t\t|\t$" + decimalFormat.format(amount));
                    });
                }
                double totalAmount = sum(amounts);
                double npv = totalAmount - project.getProjectCost();
                double totalIncome = sum(incomes);
                System.out.println("Total Income: $" + decimalFormat.format(totalIncome));
                System.out.println("Present Value of Future Benefits: $" + decimalFormat.format(totalAmount));
                System.out.println("Present Value of future Costs: $" + decimalFormat.format(project.getProjectCost()));
                System.out.println("Net Present Value(NPV): $" + decimalFormat.format(npv));
                System.out.println();

                project.setTotalIncome(totalIncome);
                project.setNpv(npv);
                projectToCompare.add(project);
            });
            //Last condition checking
            if(! projectToCompare.isEmpty()){
                npvAndIncomeCompare(projectToCompare);
            }
        }
    }

    private static void npvAndIncomeCompare(List<Project> projectToCompare) {

        List<Project> cloned_list = new ArrayList<>(projectToCompare);

        // Check for maximum total income
        Project highestTotalIncome = projectToCompare.stream()
                .max(Comparator.comparing(Project::getTotalIncome))
                .orElseThrow(NoSuchElementException::new);

        List<Project> highTotalIncomeProjectList = projectToCompare.stream()
                .filter(project -> project.getTotalIncome() == highestTotalIncome.getTotalIncome())
                .collect(Collectors.toList());

        if (highTotalIncomeProjectList.size() > 1) {
            Project projectWithHighestNPV = highTotalIncomeProjectList.stream()
                    .max(Comparator.comparing(Project::getNpv))
                    .orElseThrow(NoSuchElementException::new);
            System.out.println("The Highest income is generated by project: " + projectWithHighestNPV.getProjectName());
        } else {
            Project maximumTotalIncomeProject = highTotalIncomeProjectList.get(0);
            System.out.println("The Highest income is generated by project: " + maximumTotalIncomeProject.getProjectName());
        }

        // check for highest NPV
        Project highestNPV = cloned_list.stream()
                .max(Comparator.comparing(Project::getNpv))
                .orElseThrow(NoSuchElementException::new);

        List<Project> projectListWithHighNPV = cloned_list.stream()
                .filter(project -> project.getTotalIncome() == highestNPV.getTotalIncome())
                .collect(Collectors.toList());

        if (projectListWithHighNPV.size() > 1) {
            Project projectWithMaximumTotalIncome = projectListWithHighNPV.stream()
                    .max(Comparator.comparing(Project::getTotalIncome))
                    .orElseThrow(NoSuchElementException::new);
            System.out.println("The project the company should be executing is: " + projectWithMaximumTotalIncome.getProjectName());
        } else {
            Project projectWithHighestNPV = projectListWithHighNPV.get(0);
            System.out.println("The project the company should be executing is: " + projectWithHighestNPV.getProjectName());
        }
    }

    private static double sum(List<Double> amount) {
        return amount.stream()
                .mapToDouble(a -> a)
                .sum();
    }

    private static double calculatePVFactor(double rate, int year) {
        return 1 / Math.pow(1 + rate / 100, year);
    }

    private static double calculateAmount(double cash, double pvFactor) {
        return cash * pvFactor;
    }

    //reading project data from scanner
    private static List<Project> readDataFromScanner(Scanner scanner, String[] projectNames, double[] projectCost, double[] rate) {
        List<Project> projectList = new ArrayList<>();
        for (int i = 0; i < projectNames.length; i++) {
            Project project = new Project();
            System.out.print("Enter the name of the project: ");
            projectNames[i] = scanner.next();
            project.setProjectName(projectNames[i]);
            System.out.print("Enter the upfront cost for project " + projectNames[i] + ": ");
            projectCost[i] = scanner.nextDouble();
            project.setProjectCost(projectCost[i]);
            System.out.print("Enter the rate of return or discount rate (in %) : ");
            rate[i] = scanner.nextDouble();
            project.setRate(rate[i]);
            System.out.print("Enter the duration (in years): ");
            int duration = scanner.nextInt();
            String[] durations = new String[duration];
            double[] cash = new double[duration];
            List<Duration> durationList = readDuration(scanner, durations, cash);
            project.setDuration(durationList);
            projectList.add(project);
            System.out.println();
        }
        return projectList;
    }

    //reading duration of project from scanner
    private static List<Duration> readDuration(Scanner scanner, String[] durations, double[] cash) {
        List<Duration> durationList = new ArrayList<>();
        for (int j = 0; j < durations.length; j++) {
            int year = j + 1;
            System.out.print("Enter the cash inflow-outflow during " + year + ": ");
            Duration d = new Duration();
            cash[j] = scanner.nextDouble();
            d.setYear(year);
            d.setCash(cash[j]);
            durationList.add(d);
        }
        return durationList;
    }
}
